datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Chemical {
  id                Int       @id @default(autoincrement())
  name              String
  casNumber         String?   @unique
  synonyms          String[]
  products          Product[]
  nioshTable        Int       @default(-1)
  nioshRevisionDate DateTime? @db.Date
  additionalInfo    String?
  updatedAt         DateTime  @default(now()) @updatedAt

  //@@index([synonyms(ops: ArrayOps)], type: Gin)
  @@map("chemicals")
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  chemical   Chemical @relation(fields: [chemicalId], references: [id])
  chemicalId Int
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  vendorId   Int
  sds        SDS[]
  updatedAt  DateTime @default(now()) @updatedAt
  //ingredients Ingredient[]

  @@map("products")
}

model Vendor {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("vendors")
}

model SDS {
  id                 Int                   @id @default(autoincrement())
  product            Product               @relation(fields: [productId], references: [id])
  productId          Int
  revisionDate       DateTime              @db.Date
  hmisHealthHazard   Int
  requireVentilation Boolean
  healthHazards      HazardCategoryToSDS[]
  updatedAt          DateTime              @default(now()) @updatedAt
  ingredients        Ingredient[]

  @@unique([productId, revisionDate])
  @@map("safety_data_sheets")
}

model HazardClass {
  id               Int              @id @default(autoincrement())
  name             String
  description      String?
  hazardCategories HazardCategory[]

  @@map("hazard_classes")
}

model HazardCategory {
  id               Int                   @id @default(autoincrement())
  hazardClass      HazardClass           @relation(fields: [hazardClassId], references: [id])
  hazardClassId    Int
  parentCategory   HazardCategory?       @relation("hazard_subcategories", fields: [hazardClassId, parentLevel], references: [hazardClassId, level])
  parentLevel      String?
  subcategories    HazardCategory[]      @relation("hazard_subcategories")
  level            String
  shortDescription String?
  description      String
  safetyDataSheets HazardCategoryToSDS[]

  @@unique([hazardClassId, level])
  @@map("hazard_categories")
}

model HazardCategoryToSDS {
  id               Int            @id @default(autoincrement())
  sds              SDS            @relation(fields: [sdsId], references: [id])
  sdsId            Int
  hazardCategory   HazardCategory @relation(fields: [hazardCategoryId], references: [id])
  hazardCategoryId Int
  additionalInfo   String?

  @@unique([sdsId, hazardCategoryId, additionalInfo])
  @@map("hazard_category_to_sds")
}

model RiskAssessment {
  id                     Int                  @id @default(autoincrement())
  compound               Compound             @relation(fields: [compoundId], references: [id])
  compoundId             Int
  complexity             Complexity
  isPreparedOccasionally Boolean
  preparationFrequency   PreparationFrequency
  isSmallQuantity        Boolean

  averagePreparationAmountQuantity Float
  averagePreparationAmountUnit     Unit

  isConcentrationHealthRisk  Boolean
  requireSpecialEducation    Boolean
  hasVerificationSteps       Boolean
  haveAppropriateFacilities  Boolean
  requireVentilation         Boolean
  isWorkflowUninterrupted    Boolean
  workflowStandardsProcess   String?
  microbialContaminationRisk Boolean
  crossContaminationRisk     Boolean

  //SDS exposure risks
  sdsSkinExposureRisk             Boolean
  sdsEyeExposureRisk              Boolean
  sdsInhalationExposureRisk       Boolean
  sdsOralExposureRisk             Boolean
  sdsOtherExposureRisk            Boolean
  sdsOtherExposureRiskDescription String?

  //Product monograph exposure risks
  pmSkinExposureRisk             Boolean?
  pmEyeExposureRisk              Boolean?
  pmInhalationExposureRisk       Boolean?
  pmOralExposureRisk             Boolean?
  pmOtherExposureRisk            Boolean?
  pmOtherExposureRiskDescription String?

  //PPE
  ppeGlovesRequired        Boolean
  ppeGlovesType            GlovesType?
  ppeCoatRequired          Boolean
  ppeCoatType              CoatType?
  ppeMaskRequired          Boolean
  ppeMaskType              String?
  ppeEyeProtectionRequired Boolean
  ppeOther                 String?

  requireEyeWashStation Boolean
  requireSafetyShower   Boolean
  riskLevel             RiskLevel
  automaticRationale    String[]
  additionalRationale   String[]
  dateAssessed          DateTime  @db.Date
  compoundingSupervisor String
  updatedAt             DateTime  @default(now()) @updatedAt
  mfrs                  Mfr[]

  @@map("risk_assessments")
}

enum RiskLevel {
  A
  B
  C
}

enum GlovesType {
  regular
  chemotherapy
  double
}

enum CoatType {
  designated
  disposable
}

enum Unit {
  g
  ml
}

enum Complexity {
  simple   @map("Simple")
  moderate @map("Moderate")
  complex  @map("Complex")
}

enum PreparationFrequency {
  daily
  weekly
  monthly
  lessThanMonthly
}

model Compound {
  id                 Int              @id @default(autoincrement())
  name               String
  ingredients        Ingredient[]
  riskAssessments    RiskAssessment[]
  notes              String?
  hasShortcut        Boolean          @default(false)
  shortcutVariations Json             @default("[]") //{code: String, name: String}[]
  shortcutSuffix     String?
  mfrs               Mfr[]

  @@map("compounds")
}

model Ingredient {
  compound                    Compound     @relation(fields: [compoundId], references: [id])
  compoundId                  Int
  order                       Int
  safetyDataSheet             SDS?         @relation(fields: [safetyDataSheetId], references: [id])
  safetyDataSheetId           Int?
  physicalForm                PhysicalForm
  commercialProductName       String?
  commercialProductDin        Int?
  hasProductMonographConcerns Boolean?
  concernsDescription         String?

  @@id([compoundId, order])
  @@map("ingredients")
}

enum PhysicalForm {
  cream
  ointment
  lotion
  powder
  liquid
  solid
}

model Mfr {
  compound   Compound @relation(fields: [compoundId], references: [id])
  compoundId Int
  version    Int

  pharmaceuticalForm    String
  routeOfAdministration String

  riskAssessment      RiskAssessment @relation(fields: [riskAssessmentId], references: [id])
  riskAssessmentId    Int
  quantities          Json // {amount: Float, unit: Unit}[]
  expectedYieldAmount Float
  expectedYieldUnit   Unit
  training            String[]
  requiredEquipment   String[]
  calculations        String?
  compoundingMethod   String
  qualityControls     Json[] // {name: String, expectedSpecification: String}[]

  beyondUseDateValue Int
  beyondUseDateUnit  TimeUnit
  storage            Storage

  packaging  String
  labelling  String[]
  references String[]

  developedBy   String
  verifiedBy    String?
  effectiveDate DateTime @db.Date

  updatedAt DateTime @updatedAt

  @@id([compoundId, version])
  @@map("mfrs")
}

enum TimeUnit {
  days
  months
}

enum Storage {
  room
  fridge
  freezer
}

model Link {
  id          Int      @id @default(autoincrement())
  url         String
  name        String
  description String?
  order       Int      @default(autoincrement())
  updatedAt   DateTime @updatedAt

  @@map("directory")
}

model Settings {
  id               Int  @id @default(autoincrement())
  mfrFieldPresets  Json //{[fieldName]: {label?: String, value: any}|{label?: String, value: any}[]}
  shortcutSuffixes Json @default("[]") //{code: String, description: String}[]

  @@map("settings")
}

model Routine {
  id                Int                 @id @default(autoincrement())
  category          String?
  name              String
  description       String?
  startDate         DateTime
  recurrenceRule    String // iCal RFC String for RRule
  completionHistory RoutineCompletion[]
  isActive          Boolean             @default(true)

  @@map("routines")
}

model RoutineCompletion {
  routine   Routine  @relation(fields: [routineId], references: [id])
  routineId Int
  date      DateTime
  name      String

  @@id([routineId, date])
  @@map("routine_completions")
}
