datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Chemical {
  id                Int       @id @default(autoincrement())
  name              String
  casNumber         String    @unique
  synonyms          String[]
  products          Product[]
  nioshTable        Int       @default(-1)
  nioshRevisionDate DateTime?
  updatedAt         DateTime  @default(now()) @updatedAt
  //ingredients       Ingredient[]

  @@map("chemicals")
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  chemical   Chemical @relation(fields: [chemicalId], references: [id])
  chemicalId Int
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  vendorId   Int
  sds        SDS[]
  updatedAt  DateTime @default(now()) @updatedAt
  //ingredients Ingredient[]

  @@map("products")
}

model Vendor {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("vendors")
}

model SDS {
  id                 Int                   @id @default(autoincrement())
  product            Product               @relation(fields: [productId], references: [id])
  productId          Int
  revisionDate       DateTime
  hmisHealthHazard   Int
  requireVentilation Boolean
  healthHazards      HazardCategoryToSDS[]
  filename           String
  updatedAt          DateTime              @default(now()) @updatedAt
  ingredients        Ingredient[]

  @@unique([productId, revisionDate])
  @@map("safety_data_sheets")
}

model HazardClass {
  id               Int              @id @default(autoincrement())
  name             String
  description      String?
  hazardCategories HazardCategory[]

  @@map("hazard_classes")
}

model HazardCategory {
  id               Int                   @id @default(autoincrement())
  hazardClass      HazardClass           @relation(fields: [hazardClassId], references: [id])
  hazardClassId    Int
  parentCategory   HazardCategory?       @relation("hazard_subcategories", fields: [hazardClassId, parentLevel], references: [hazardClassId, level])
  parentLevel      String?
  subcategories    HazardCategory[]      @relation("hazard_subcategories")
  level            String
  description      String
  safetyDataSheets HazardCategoryToSDS[]

  @@unique([hazardClassId, level])
  @@map("hazard_categories")
}

model HazardCategoryToSDS {
  id               Int            @id @default(autoincrement())
  sds              SDS            @relation(fields: [sdsId], references: [id])
  sdsId            Int
  hazardCategory   HazardCategory @relation(fields: [hazardCategoryId], references: [id])
  hazardCategoryId Int
  additionalInfo   String?

  @@unique([sdsId, hazardCategoryId, additionalInfo])
  @@map("hazard_category_to_sds")
}

model RiskAssessment {
  id                     Int                  @id @default(autoincrement())
  compoundName           String
  ingredients            Ingredient[]
  complexity             Complexity
  isPreparedOccasionally Boolean
  preparationFrequency   PreparationFrequency
  isSmallQuantity        Boolean

  averagePreparationAmountQuantity Float?
  averagePreparationAmountUnit     Unit?

  isConcentrationHealthRisk  Boolean
  requireSpecialEducation    Boolean
  hasVerificationSteps       Boolean
  haveAppropriateFacilities  Boolean
  requireVentilation         Boolean
  isWorkflowUninterrupted    Boolean
  workflowStandardsProcess   String?
  microbialContaminationRisk Boolean
  crossContaminationRisk     Boolean

  //SDS exposure risks
  sdsSkinExposureRisk             Boolean
  sdsEyeExposureRisk              Boolean
  sdsInhalationExposureRisk       Boolean
  sdsOralExposureRisk             Boolean
  sdsOtherExposureRisk            Boolean
  sdsOtherExposureRiskDescription String?

  //Product monograph exposure risks
  pmSkinExposureRisk             Boolean?
  pmEyeExposureRisk              Boolean?
  pmInhalationExposureRisk       Boolean?
  pmOralExposureRisk             Boolean?
  pmOtherExposureRisk            Boolean?
  pmOtherExposureRiskDescription String?

  //PPE
  ppeGlovesRequired        Boolean
  ppeGlovesType            GlovesType?
  ppeCoatRequired          Boolean
  ppeCoatType              CoatType?
  ppeMaskRequired          Boolean
  ppeMaskType              String?
  ppeEyeProtectionRequired Boolean
  ppeOther                 String?

  requireEyeWashStation Boolean
  requireSafetyShower   Boolean
  riskLevel             RiskLevel
  automaticRationale    String[]
  additionalRationale   String[]
  dateAssessed          DateTime  @db.Date
  updatedAt             DateTime  @default(now()) @updatedAt

  @@map("risk_assessments")
}

enum RiskLevel {
  A
  B
  C
}

enum GlovesType {
  regular
  chemotherapy
  double
}

enum CoatType {
  designated
  disposable
}

enum Unit {
  g
  ml
}

enum Complexity {
  simple   @map("Simple")
  moderate @map("Moderate")
  complex  @map("Complex")
}

enum PreparationFrequency {
  daily
  weekly
  monthly
}

model Ingredient {
  id                          Int            @id @default(autoincrement())
  riskAssessment              RiskAssessment @relation(fields: [riskAssessmentId], references: [id])
  riskAssessmentId            Int
  //chemical                    Chemical       @relation(fields: [chemicalId], references: [id])
  //chemicalId                  Int            
  //product                     Product        @relation(fields: [productId], references: [id])
  //productId                   Int            
  safetyDataSheet             SDS            @relation(fields: [safetyDataSheetId], references: [id])
  safetyDataSheetId           Int
  physicalForm                PhysicalForm
  commercialProductName       String?
  commercialProductDin        Int?
  hasProductMonographConcerns Boolean?
  concernsDescription         String?

  @@map("ingredients")
}

enum PhysicalForm {
  cream
  ointment
  powder
  liquid
  solid
}
